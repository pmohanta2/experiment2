{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dc5cbbe0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import cv2\n",
    "import numpy as np\n",
    "import streamlit as st\n",
    "from typing import List\n",
    "from PIL import Image\n",
    "#from fer import FacialExpressionRecognizer\n",
    "from mtcnn.mtcnn import MTCNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "35a64d6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FacialExpressionRecognizer():\n",
    "    \"\"\"\n",
    "    Class for facial expression recognition\n",
    "    \"\"\"\n",
    "    def __init__(self, model_path: str):\n",
    "        \"\"\"\n",
    "        Constructor\n",
    "        Args:\n",
    "            model_path (str): path to facial expression recognizer model\n",
    "        \"\"\"\n",
    "        # load pre trained facial expression recognizer model\n",
    "        self.model: keras.Model = keras.models.load_model(model_path)\n",
    "\n",
    "\n",
    "    def pre_process_image(self, img: np.ndarray) -> np.ndarray:\n",
    "        \"\"\"\n",
    "        Method to preprocess image for model\n",
    "        Args:\n",
    "            img (np.ndarray): image\n",
    "        Returns:\n",
    "            np.ndarray: preprocessed image\n",
    "        \"\"\"\n",
    "        # resize image\n",
    "        preprocessed_img: np.ndarray = cv2.resize(img, (96,96))\n",
    "        # transfrom image to grayscale\n",
    "        preprocessed_img: np.ndarray = cv2.cvtColor(preprocessed_img,\n",
    "                                                    cv2.COLOR_BGR2GRAY)\n",
    "        # create 3 dimension grayscale image\n",
    "        preprocessed_img: np.ndarray = cv2.cvtColor(preprocessed_img,\n",
    "                                                    cv2.COLOR_GRAY2RGB)\n",
    "        # preprocess image\n",
    "        preprocessed_img: np.ndarray = xception.preprocess_input(\n",
    "            preprocessed_img)\n",
    "        return preprocessed_img\n",
    "    \n",
    "\n",
    "    def get_facial_expression_value(self, img: np.ndarray) -> int:\n",
    "        \"\"\"\n",
    "        method to get image facial expression value\n",
    "        Args:\n",
    "            img (np.ndarray): image\n",
    "        Returns:\n",
    "            int: number between 0-6\n",
    "        \"\"\"\n",
    "        return np.argmax(self.model.predict(np.asarray([img])),\n",
    "                         axis=-1)[0]\n",
    "\n",
    "\n",
    "    def get_facial_expression_label(self, img: np.ndarray) -> str:\n",
    "        \"\"\"\n",
    "        method to get image facial expression label\n",
    "        Args:\n",
    "            img (np.ndarray): image\n",
    "        Returns:\n",
    "            str: facial expression label\n",
    "        \"\"\"\n",
    "        # map of emotion value to string \n",
    "        emotion_map: Dict[int,str] = {0:\"Angry\", 1:\"Disgust\", 2:\"Fear\",\n",
    "                                      3:\"Happy\", 4:\"Sad\", 5:\"Surprise\",\n",
    "                                      6:\"Neutral\"}\n",
    "        return emotion_map[self.get_facial_expression_value(img)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0ca4f44b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "from typing import Dict\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras.applications import xception"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5dda835a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# get script directory\n",
    "#script_dir: str = os.path.dirname(os.path.realpath(__file__))\n",
    "# get facial expression recognizer model path\n",
    "fer_model_path: str = \"model.h5\"\n",
    "# get face detection model path\n",
    "cascade_model_path: str = \"haarcascade_frontalface_default.xml\"\n",
    "# facial expression recognizer\n",
    "fer: FacialExpressionRecognizer = FacialExpressionRecognizer(fer_model_path)\n",
    "# face detection\n",
    "detector: cv2.CascadeClassifier = MTCNN()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "13a47ae7",
   "metadata": {},
   "outputs": [],
   "source": [
    "@st.cache(suppress_st_warning=True)\n",
    "def classify_image(img: np.ndarray) -> np.ndarray:\n",
    "    \"\"\"[summary]\n",
    "    Args:\n",
    "        img (np.ndarray): [description]\n",
    "    Returns:\n",
    "        np.ndarray: [description]\n",
    "    \"\"\"\n",
    "    # perform face detection\n",
    "    faces: np.ndarray = detector.detect_faces(img)\n",
    "\n",
    "    # predict labels for each detected face\n",
    "    labels: List[str] = []\n",
    "    for face in faces:\n",
    "        # extract\n",
    "        x: int = 0\n",
    "        y: int = 0\n",
    "        w: int = 0\n",
    "        h: int = 0\n",
    "        x, y, w, h = face[\"box\"]\n",
    "        # crop image\n",
    "        face: np.ndarray = img[y:y + h, x:x + w]\n",
    "        # pre process image\n",
    "        face: np.ndarray = fer.pre_process_image(face)\n",
    "        # add facial expression label to labels\n",
    "        labels.append(fer.get_facial_expression_label(face))\n",
    "\n",
    "    # print bounding box and label \n",
    "    for index, face in enumerate(faces):\n",
    "        # extract\n",
    "        x: int = 0\n",
    "        y: int = 0\n",
    "        w: int = 0\n",
    "        h: int = 0\n",
    "        x, y, w, h = face[\"box\"]\n",
    "        # draw a rectangle over the img\n",
    "        cv2.rectangle(img, (x, y), (x + w, y + h), (255,0,0), 1)\n",
    "        # draw prediction over the img\n",
    "        cv2.putText(img, labels[index], (x, y+30),\n",
    "                    cv2.FONT_HERSHEY_SIMPLEX, 1,\n",
    "                    (255,0,0), 2)\n",
    "    # show the image\n",
    "    return img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "25058af8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b3a4374e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-06-23 23:22:03.038 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\ProgramData\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    # app title\n",
    "    st.markdown(\"# Facial Expression Recognition\")\n",
    "    st.text(\"\\n\")\n",
    "    st.text(\"\\n\")\n",
    "    \n",
    "    # app upload image for model\n",
    "    st.markdown(\"### Upload Image\")\n",
    "    st.write((\"Please upload an image for facial expression recognition.\"))\n",
    "    uploaded_file: st.uploaded_file_manager.UploadedFile = st.file_uploader(\n",
    "        \"\", type=['jpg', 'jpeg'])\n",
    "    \n",
    "    # app button to start facial expression recognition\n",
    "    if st.button(\"Classify Facial Expression\"):\n",
    "        if uploaded_file is None:\n",
    "            st.error(\"Please upload a image to classify\")\n",
    "        else:\n",
    "            with st.spinner('Classifying ...'):\n",
    "                st.image(classify_image(np.asarray(Image.open(uploaded_file))))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
